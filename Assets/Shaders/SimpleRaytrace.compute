// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Struct which represents a sphere in the scene
struct Sphere{
    float3 centerCoords;
    float radius;
    float4 diffuseColor;
    float4 specColor;
    // 0 = not reflective, 1 = is reflective
    int isReflective;

    // TODO: Add more material properties
};

// Struct which represents a Ray cast in the screen
struct Ray{
    float3 origin;
    float3 direction;
};

/* Structure which stores the result of a raycast.
* Holds a int which marks if an object was hit (o for false, 1 for true),
* the intersectionPoint, and what object was intersected */
struct RaycastHit{
    int hitOccured;
    float3 intersectionPoint;
    Sphere intersected;
};

// Color to make pixels which don't intersect with any objects
float4 backgroundColor;

// Location of the camera in the scene
float3 camLoc;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Buffer to fill with the objects in the world
StructuredBuffer<Sphere> Objects;

// Buffer to fill with the random numbers to be used in execution
StructuredBuffer<float2> RandomNums;

// Number of object in the world (size of _objects)
uint numObjects;

// Width of the screen in pixels
uint screenWidthPixels;
// Height of the screen in pixels
uint screenHeightPixels;
// The width of the screen in world coordiantes
float screenWidthCoords;
// The height of the screen in world coordinates
float screenHeightCoords;

// Number of samples to take within each pixel (Number of rays to cast for each pixel)
uint numSamples;

// Position of the primary light (sun) for this scene
float3 lightPos;


// Calculate the distance between points a and b in 3D space
float Dist3D(float3 a, float3 b){
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2) + pow(a.z - b.z, 2));
}


// Create a Ray struct from the origing and target points 
Ray CreateRay(float3 origin, float3 target){
    // Create the direction vector
    float3 direction = normalize(target - origin);

    // Create ray structure to return 
    Ray retVal;
    retVal.origin = origin;
    retVal.direction = direction;

    return retVal;
}

// Create a ray which shoots through the pixel with the given x and y location on the screen
// Also takes in a random offset from the center of the pixel so a random location within the pixel 
//can be sampled; this is used for anti-aliasing. 
Ray CreateRayFromPixelLoc(uint x, uint y, float xOffset, float yOffset){
    // Calculate the size of a pixel in world coords
    float pixelSize = screenWidthCoords / screenWidthPixels;  

    // Calculate the x and y change in world coords needed to move by a pixel
    float aspectRatio = (float)screenWidthPixels / (float)screenHeightPixels;
    float pixShiftX = screenWidthCoords / screenWidthPixels;
    float pixShiftY = (screenWidthCoords / screenHeightPixels) / aspectRatio;

    // Calculate the position in world coords of the upper left pixel 
    float3 worldUpperLeft = float3(camLoc.x - (screenWidthCoords / 2), camLoc.y + (screenHeightCoords / 2), camLoc.z + 1);
    float3 firstPixelLoc = float3(
        worldUpperLeft.x + (0.5 * pixShiftX), 
        worldUpperLeft.y - (0.5 * pixShiftY), 
        worldUpperLeft.z);
    
    // Get the location of a point within this pixel to sample
    float3 pixelWordPos = float3(
        firstPixelLoc.x + (x * pixShiftX) + xOffset, 
        firstPixelLoc.y - (y * pixShiftY) + yOffset, 
        camLoc.z + 1.0);

    Ray retVal = CreateRay(camLoc, pixelWordPos);

    return retVal;
}

// Return the closest distance along Ray r at which the r and Sphere s intersect. 
// If they don't intersect return -1
float FindIntersectionPoint(Ray r, Sphere s){
    // Check for intersection by calculating the discriminant of the equation created by combining them (TODO: Reword)

    // Calculate r.origin - s.center
    float3 ocDiff = r.origin - s.centerCoords;

    // Note: a,b, and c are coefficients in a quadratic equation
    // Calculate a 
    float a = dot(r.direction, r.direction);

    // Calculate b 
    float b = 2 * dot(r.direction, ocDiff);

    // Calculate c 
    float c = dot(ocDiff, ocDiff) - (s.radius * s.radius);

    // Calculate the discriminant
    float discriminant = (b * b) - (4 * a * c);

    // If the discriminant is negative return -1 to indicate no intersection
    if(discriminant < 0){
        return -1;
    }
    else{
        // Find intersection points
        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);

        // If both points are negative return -1 to indicate no intersection
        if(t1 < 0.0 && t2 < 0.0){
            return -1;
        }
        // If either point is negative return the other
        else if(t1 < 0.0){
            return t2;
        }
        else if(t2 < 0.0){
            return t1;
        }
        // Otherwise return the closest intersection point
        else{
            return min(t1, t2);
        }

    }
}

// Find the color a given pixel should be by casting a ray into the scene
RaycastHit CastRay(Ray r){
    float3 closestPoint;
    // Start with an arbitrary high number of a stand in for infinity
    float closestPointDist = 100000;
    // Index in the buffer of sphere intersected with 
    uint closestPointObjIndex = 0;

    // Find the closest intersection point between the ray and the spheres (If one exists)
    for(uint i =0; i < numObjects; i++){
        // Get the sphere
        Sphere s = Objects[i];

        // Get (closest) point along r it intersects with s
        float t = FindIntersectionPoint(r, s);

        // If t < 0  move on because that indicates no intersection
        if(t >= 0){
            // If t is less than the currently saved distance save this intersection as the new closest
            if(t < closestPointDist){
                // Set to  point corresponding to t distance along r
                closestPoint = float3(r.origin.x + (r.direction.x * t), r.origin.y + (r.direction.y * t), r.origin.z + (r.direction.z * t));
                closestPointDist = t;
                closestPointObjIndex = i;
            }        
        }
    }

    // Create RaycastHit struct based on chosen intersection point (or none)
    RaycastHit rh;
    if(closestPointDist == 100000){
        rh.hitOccured = 0;
        rh.intersectionPoint = camLoc;
        rh.intersected = Objects[0];
    }
    else{
        rh.hitOccured = 1;
        rh.intersectionPoint = closestPoint;
        rh.intersected = Objects[closestPointObjIndex];
    }

    return rh;
    
}

// Calculate the color a pixel should be based on its ray and that rays closest intersection with an object in the screen
// (or lack thereof)
float4 CalculateColorVal(Ray r, RaycastHit hit){
    // If no hit occured return background color
    if(hit.hitOccured == 0){
        return backgroundColor;
    }
     // TODO: Add more complex materials and lighting calculation
    // Otherwise calculate the lighting value
    else{
        // Calculate distance between camera and intersection point
        float dist = Dist3D(r.origin, hit.intersectionPoint);

        // Get base color
        float4 baseColor = hit.intersected.diffuseColor;

        // Check if this point is shadowed
        // Move the origin point slightly to prevent intersection at the same point again
        float3 offSetRay = hit.intersectionPoint + (-0.001 * r.direction);
        Ray shadowRay = CreateRay(offSetRay, lightPos);
        RaycastHit shadowRaycast = CastRay(shadowRay);

        // If this point is shadowed
        float shadowCoefficient = 1;
        if(shadowRaycast.hitOccured != 0){
            // Darken it by a specific percentage
            shadowCoefficient = 0.8;
        }

        // TODO: Calculate specular lighting and reflection
            
        // TODO: Don't hardcode the numerator (light strength)

        // Calculate intensity
        float intensity = 12 / pow(dist, 2);

        // Calculate normal vector for the intersection point
        float3 normalVec = hit.intersectionPoint - hit.intersected.centerCoords;
        normalVec = normalize(normalVec);

        // Calculate reflection vector
        Ray lightToPoint = CreateRay(lightPos, hit.intersectionPoint);
        float3 lightReflectionVector = lightToPoint.direction - (2 * (lightToPoint.direction * normalVec) * normalVec);

        // Calculate diffuse coefficient
        float kd = max(0.0, dot(normalVec, shadowRay.direction));

        // Calculate specular coefficient
        //float ks = pow(max(dot(shadowRay.direction, lightReflectionVector), 0.0), 8.0);

        // Calculate diffuse color
        float4 diffuseColor = kd * hit.intersected.diffuseColor;

        // Calculate specular color
        //float4 specColor = ks * hit.intersected.specColor;

        // If the being surface is reflective and not shadowed check if a reflection is being cast on it
        if(hit.intersected.isReflective == 1 && shadowCoefficient == 1){
            // Setup reflection ray
            float3 reflectionVector = r.direction - (2 * (r.direction * normalVec) * normalVec);
            Ray reflectionRay;
            reflectionRay.origin = hit.intersectionPoint;
            reflectionRay.direction = reflectionVector;

            // Cast reflection ray
            RaycastHit reflectionHit = CastRay(reflectionRay);
            
            // If the reflection ray intersected anything
            if(reflectionHit.hitOccured == 1){
                // Check if the hit surface is shadowed 
                RaycastHit reflectedShadowHit = CastRay(CreateRay(reflectionHit.intersectionPoint, lightPos));

                if(reflectedShadowHit.hitOccured == 0){
                    // Sample surface intersected by reflection ray
                    return (0.1 * (diffuseColor) * intensity) + (0.9 * reflectionHit.intersected.diffuseColor);
                }
            }
        }

        // Otherwise calculate without casting reflection rays
        return (diffuseColor) * intensity * shadowCoefficient;

    }
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the colors to make this pixel using a raycast
    float4 finalPixelColor = float4(0, 0, 0, 0);

    // Take all the samples 
    for(uint i =0; i < numSamples; i++){
        // Get random offset passed from CPU
        float2 randOffset = RandomNums[(id.y * screenWidthPixels) + id.x + i];

        // Create the ray 
        Ray r = CreateRayFromPixelLoc(id.x, id.y, randOffset.x, randOffset.y);
        
        // Cast the ray into the scene
        RaycastHit raycast = CastRay(r);

        // Calculate color sample
        float4 pixelCol = CalculateColorVal(r, raycast);

        // Add sampled color to the final color
        finalPixelColor = finalPixelColor + pixelCol;
    }

    // Divide the final color to average it
    finalPixelColor /= numSamples;


    Result[id.xy] = finalPixelColor;
}
