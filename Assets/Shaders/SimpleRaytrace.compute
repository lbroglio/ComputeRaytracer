// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Struct which represents a sphere in the scene
struct Sphere{
    float3 centerCoords;
    float radius;
    float4 matColor;

    // TODO: Add more material properties
};

// Struct which represents a Ray cast in the screen
struct Ray{
    float3 origin;
    float3 direction;
};

// Color to make pixels which don't intersect with any objects
float4 backgroundColor;

// Location of the camera in the scene
float3 camLoc;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

// Buffer to fill with the objects in the world
StructuredBuffer<Sphere> Objects;

// Number of object in the world (size of _objects)
uint numObjects;

// Width of the screen in pixels
uint screenWidthPixels;
// Height of the screen in pixels
uint screenHeightPixels;
// The width of the screen in world coordiantes
float screenWidthCoords;
// The height of the screen in world coordinates
float screenHeightCoords;

// Value used to calculate how colors darken when they are farther away from the camera. 
// Currently arbitrary and best set using trial and error
uint darkenScaleVal = 6;

// Calculate the distance between points a and b in 3D space
float Dist3D(float3 a, float3 b){
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2) + pow(a.z - b.z, 2));
}

// Create a ray which shoots through the pixel with the given x and y location on the screen
Ray CreateRayFromPixelLoc(uint x, uint y){
    // Calculate the size of a pixel in world coords
    float pixelSize = screenWidthCoords / screenWidthPixels;  

    // Calculate the x and y change in world coords needed to move by a pixel
    float aspectRatio = (float)screenWidthPixels / (float)screenHeightPixels;
    float pixShiftX = screenWidthCoords / screenWidthPixels;
    float pixShiftY = (screenWidthCoords / screenHeightPixels) / aspectRatio;

    // Calculate the position in world coords of the upper left pixel 
    float3 worldUpperLeft = float3(camLoc.x - (screenWidthCoords / 2), camLoc.y + (screenHeightCoords / 2), camLoc.z + 1);
    float3 firstPixelLoc = float3(
        worldUpperLeft.x + (0.5 * pixShiftX), 
        worldUpperLeft.y - (0.5 * pixShiftY), 
        worldUpperLeft.z);
    
    // Get the location of this pixel
    float3 pixelWordPos = float3(
        firstPixelLoc.x + (x * pixShiftX), 
        firstPixelLoc.y - (y * pixShiftY), 
        camLoc.z + 1.0);

    // Create the direction vector
    float3 direction = normalize(pixelWordPos - camLoc);

    // Create ray structure to return 
    Ray retVal;
    retVal.origin = float3(camLoc.x, camLoc.y, camLoc.z);
    retVal.direction = direction;

    return retVal;
}

// Return the closest distance along Ray r at which the r and Sphere s intersect. 
// If they don't intersect return -1
float FindIntersectionPoint(Ray r, Sphere s){
    // Check for intersection by calculating the discriminant of the equation created by combining them (TODO: Reword)

    // Calculate r.origin - s.center
    float3 ocDiff = r.origin - s.centerCoords;

    // Note: a,b, and c are coefficients in a quadratic equation
    // Calculate a 
    float a = dot(r.direction, r.direction);

    // Calculate b 
    float b = 2 * dot(r.direction, ocDiff);

    // Calculate c 
    float c = dot(ocDiff, ocDiff) - (s.radius * s.radius);

    // Calculate the discriminant
    float discriminant = (b * b) - (4 * a * c);

    // If the discriminant is negative return -1 to indicate no intersection
    if(discriminant < 0){
        return -1;
    }
    else{
        // Find intersection points
        float t1 = (-b - sqrt(discriminant)) / (2.0 * a);
        float t2 = (-b + sqrt(discriminant)) / (2.0 * a);

        // If both points are negative return -1 to indicate no intersection
        if(t1 < 0.0 && t2 < 0.0){
            return -1;
        }
        // If either point is negative return the other
        else if(t1 < 0.0){
            return t2;
        }
        else if(t2 < 0.0){
            return t1;
        }
        // Otherwise return the closest intersection point
        else{
            return min(t1, t2);
        }

    }
}

// Find the color a given pixel should be by casting a ray into the scene
float4 CastRay(uint x, uint y){
    // Create the ray 
    Ray r = CreateRayFromPixelLoc(x, y);

    float3 closestPoint;
    // Start with an arbitrary high number of a stand in for infinity
    float closestPointDist = 100000;
    // Index in the buffer of sphere intersected with 
    uint closestPointObjIndex = 0;

    // Find the closest intersection point between the ray and the spheres (If one exists)
    for(uint i =0; i < numObjects; i++){
        // Get the sphere
        Sphere s = Objects[i];

        // Get (closest) point along r it intersects with s
        float t = FindIntersectionPoint(r, s);

        // If t < 0  move on because that indicates no intersection
        if(t >= 0){
            // If t is less than the currently saved distance save this intersection as the new closest
            if(t < closestPointDist){
                // Set to  point corresponding to t distance along r
                closestPoint = float3(r.origin.x + (r.direction.x * t), r.origin.y + (r.direction.y * t), r.origin.z + (r.direction.z * t));
                closestPointDist = t;
                closestPointObjIndex = i;
            }        
        }
    }

    // If a point was found return its material color scaled by the distance
    // TODO: Add more complex materials and lighting calculation
    // If no intersection was found return background color
    if(closestPointDist == 100000){
        return backgroundColor;
    }
    else{
        //TODO: Look into changing this from using an arbitrary value to emulating the inverse square law
        // Get the distance between intersection point and the camera
        float distMod = closestPointDist / 100;
        // Subtract the dist mode from the material color of the intersected object
        float4 baseColor = Objects[closestPointObjIndex].matColor;
        // TODO: Don't hardcode once/if see through materials are introduced
        float4 changedColor = float4(max(baseColor.x - distMod, 0), max(baseColor.y - distMod, 0), max(baseColor.z - distMod, 0), 1);

        return changedColor;
    }
    
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get color to make this pixel using a raycast
    float4 pixelCol = CastRay(id.x, id.y);

    Result[id.xy] = pixelCol;
}
